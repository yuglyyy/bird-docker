# docker-compose.yml
services:
  birds:
    image: yuglyyy/bird-files:latest
    container_name: new-birds
    restart: unless-stopped
    env_file:
      - .env
    working_dir: /opt/bird-files
    volumes:
      - ../bird-files/data/recordings:/opt/bird-files/record/recordings
      - ../bird-files/data/data_temp_Audios:/opt/bird-files/record/data_temp/Audios
      - ../bird-files/data/data_temp_Segments:/opt/bird-files/record/data_temp/Segments
      - ../bird-files/data/tmp:/opt/bird-files/record/data_temp/tmp
      - ../bird-files/data/s3_data:/opt/bird-files/record/data

    # for the pi
    devices:
      - /dev/snd:/dev/snd
    group_add:
      - audio
    environment:
      # sensible defaults (can be overridden by overrides or .env)
      RECORD_CMD: python -u record/record_upload.py
      PREDICT_CMD: python -u record/Code/predict_on_audio.py
      MOCK_OUT_DIR: /opt/bird-files/record/data_temp/Audios
      MOCK_DURATION: "5"
      PYTHONPATH: /opt/bird-files
      ARECORD_DEVICE: plug:mic_in
      FORCE_ARECORD_DEVICE: "1"
    command: bash -lc 'printf "%s\n"
      "pcm.mic_in {"
      "  type dsnoop"
      "  ipc_key 1024"
      "  slave { pcm \"hw:2,0\" channels 2 }"
      "  bindings.0 0"
      "  bindings.1 1"
      "}"
      "ctl.mic_in { type hw; card 2; }"
      > /etc/asound.conf;
      echo "[asound] defined dsnoop pcm=mic_in on hw:2,0";
      arecord -L | grep mic_in || true;
      exec /usr/local/bin/run-birds.sh'
